= PLATES Line Format

== Introduction

The PLATES line format is one of the two file formats used by the PlatesProgram (the other being the PlatesRotationFormat).

The line format is used to encode the geological data manipulated by the PlatesProgram?. It is a GeometryCentric format — the quantum of data in a file is a point or polyline (whose position is encoded as a sequence of LatLonPoints) — but it is able to store a limited amount of additional information about each datum, in a two-line header which precedes the encoding of the geometry. 

== Problems With The Format

There are several problems with the PLATES line format. These problems were some of the primary justifications for the creation of GPML.

=== Inability to extend the format 

The PLATES line format is a plain-text, ASCII-line-oriented format which relies upon a predetermined set of fixed-width fields to encode and structure its information. Because of this, it is extremely difficult to extend the format to include additional information (such as additional fields or new types of geometry such as grids); by the time of the commencement of GPlates development, as many additional fields had been retro-fitted into the header as was possible without breaking backwards compatibility.

=== Inappropriateness of some fields in the header 

Since the same structure is used for all points and polylines, regardless of the type of the datum being represented by the point or polyline, some fields in the header are not appropriate to some types of data. Conversely, some types of data can not be satisfactorily represented within the existing fields.

=== Overflow of fixed-width fields 

In even moderately-sized data sets, auto-incrementing integer ID values can overflow the fixed-width fields which contain them.

=== Poor documentation 

The only source of information on the PLATES line format is an appendix of plates4.0: A User's Manual for the Plates Project's interactive reconstruction software by L. M. Gahagan, and documentation about the individual fields in the header is often extremely minimalist. (PlatesProgram is closed source, so it's not possible to read the source code directly to see how it all works.)

=== The need for a hand-coded parser

Since the PLATES line format is a custom, ASCII-line-oriented format, any program which wishes to read the format must implement its own hand-coded parser. (Again, it's not possible to borrow one from PlatesProgram, because it's closed source.) Thus, if the PLATES line format were the primary GPlates file format, other software developers would be discouraged from interoperating with GPlates.

== File Structure

A PLATES line format file consists of a sequence of point- and/or polyline-data. Each datum begins with a two-line header, followed by the encoding of the geometry of the datum. The geometry of the datum is generally stored in its present-day position.

=== Header Format

In the following tables, the values in the Fortran Code and Identifier columns were taken from an appendix of plates4.0: A User's Manual for the Plates Project's interactive reconstruction software by L. M. Gahagan.

Integer and floating-point numbers are right-aligned within their fields. The width in characters of floating-point numbers includes the decimal point.

More information on Python string slices can be found in the Python Tutorial (search for the text "slice notation"). 

==== First Line

.First Line
[grid="all"]
`-------------`------------------------`--------------`-----------------------`---------------
Fortran Code    Type                     Python Slice   Identifier              C++ Type
----------------------------------------------------------------------------------------------
2i		22x 2-digit integer      0:2 	        region number 	        unsigned int
					 2:4 	        reference number  	unsigned int
1x              whitespace character 	 		 -                       -
1i4             1x 4-digit integer 	 5:9 	        string number   	unsigned int
1x		whitespace character 
a		ASCII string 	 	 10: 	        geographic description 	std::string
---------------------------------------------------------------------------------------------

.Second Line
[grid="all"]
`-------------`------------------------`--------------`------------------------------------------------------`---------------
Fortran Code    Type                     Python Slice   Identifier                                             C++ Type
-----------------------------------------------------------------------------------------------------------------------------
x		whitespace character	 		-							-
i3		3-digit interger	 1:4		plate id number						unsigned int
x		whitespace character	 		-							-
f6.1		decimal floating-point	 5:11		age of appearance (Ma) (6 characters in width, 		float
							1 character after d.p.)
x		whitespace character			-							-
f6.1		decimal floating-point	 12:18		age of disappearance (Ma)				float
x		whitespace character	 		-							-
a2		2-char ASCII string 	 19:21 		data type code (see PlatesTypeCodes)			std::string
i4		4-digit interger	 21:25		data type code number					unsigned int
a1		1-char ASCII string	 25:26		-							std::string
i3		3-digit interger	 26:29		conjugate plate id number				unsigned int
x		whitespace character	 		-							-
i3		3-digit interger	 30:33		colour code						unsigned int
x		whitespace character			-							-
i5		5-digit character	 34:39		number of points (not counting the final 		unsigned int
							"terminator" point (99.0000,99.0000)) 
------------------------------------------------------------------------------------------------------------------------------